// Package frp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package frp

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// GetFrpReleaseParams defines parameters for GetFrpRelease.
type GetFrpReleaseParams struct {
	// Page page
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize pageSize
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetFrpReleaseJSONRequestBody defines body for GetFrpRelease for application/json ContentType.
type GetFrpReleaseJSONRequestBody = ModelsSystem

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Frpc Config
	// (GET /frp/config)
	GetFrpConfig(c *gin.Context)
	// Install Frpc
	// (POST /frp/install)
	PostFrpInstall(c *gin.Context)
	// List Frp Release
	// (GET /frp/release)
	GetFrpRelease(c *gin.Context, params GetFrpReleaseParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetFrpConfig operation middleware
func (siw *ServerInterfaceWrapper) GetFrpConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFrpConfig(c)
}

// PostFrpInstall operation middleware
func (siw *ServerInterfaceWrapper) PostFrpInstall(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostFrpInstall(c)
}

// GetFrpRelease operation middleware
func (siw *ServerInterfaceWrapper) GetFrpRelease(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFrpReleaseParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFrpRelease(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/frp/config", wrapper.GetFrpConfig)
	router.POST(options.BaseURL+"/frp/install", wrapper.PostFrpInstall)
	router.GET(options.BaseURL+"/frp/release", wrapper.GetFrpRelease)
}
