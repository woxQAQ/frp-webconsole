// Code generated by goa v3.19.1, DO NOT EDIT.
//
// frpc HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/woxQAQ/frp-webconsole/api -o pkg

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	frpc "github.com/woxQAQ/frp-webconsole/pkg/gen/frpc"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildListFrpReleaseRequest instantiates a HTTP request object with method
// and path set to call the "frpc" service "ListFrpRelease" endpoint
func (c *Client) BuildListFrpReleaseRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListFrpReleaseFrpcPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("frpc", "ListFrpRelease", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListFrpReleaseRequest returns an encoder for requests sent to the frpc
// ListFrpRelease server.
func EncodeListFrpReleaseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*frpc.ListFrpReleasePayload)
		if !ok {
			return goahttp.ErrInvalidType("frpc", "ListFrpRelease", "*frpc.ListFrpReleasePayload", v)
		}
		values := req.URL.Query()
		if p.Os != nil {
			values.Add("os", *p.Os)
		}
		if p.Arch != nil {
			values.Add("arch", *p.Arch)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListFrpReleaseResponse returns a decoder for responses returned by the
// frpc ListFrpRelease endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListFrpReleaseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListFrpReleaseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("frpc", "ListFrpRelease", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateFrpReleaseResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("frpc", "ListFrpRelease", err)
			}
			res := NewListFrpReleaseFrpReleaseOK(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("frpc", "ListFrpRelease", resp.StatusCode, string(body))
		}
	}
}

// unmarshalFrpReleaseResponseToFrpcFrpRelease builds a value of type
// *frpc.FrpRelease from a value of type *FrpReleaseResponse.
func unmarshalFrpReleaseResponseToFrpcFrpRelease(v *FrpReleaseResponse) *frpc.FrpRelease {
	res := &frpc.FrpRelease{
		TagName:   v.TagName,
		CreatedAt: v.CreatedAt,
	}
	if v.Assets != nil {
		res.Assets = make([]*frpc.FrpAsset, len(v.Assets))
		for i, val := range v.Assets {
			res.Assets[i] = unmarshalFrpAssetResponseToFrpcFrpAsset(val)
		}
	}

	return res
}

// unmarshalFrpAssetResponseToFrpcFrpAsset builds a value of type
// *frpc.FrpAsset from a value of type *FrpAssetResponse.
func unmarshalFrpAssetResponseToFrpcFrpAsset(v *FrpAssetResponse) *frpc.FrpAsset {
	if v == nil {
		return nil
	}
	res := &frpc.FrpAsset{
		Name:        v.Name,
		DownloadURL: v.DownloadURL,
		Size:        v.Size,
		Downloads:   v.Downloads,
	}

	return res
}
