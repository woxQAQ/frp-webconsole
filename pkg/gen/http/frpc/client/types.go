// Code generated by goa v3.19.1, DO NOT EDIT.
//
// frpc HTTP client types
//
// Command:
// $ goa gen github.com/woxQAQ/frp-webconsole/api -o pkg

package client

import (
	frpc "github.com/woxQAQ/frp-webconsole/pkg/gen/frpc"
	goa "goa.design/goa/v3/pkg"
)

// ListFrpReleaseResponseBody is the type of the "frpc" service
// "ListFrpRelease" endpoint HTTP response body.
type ListFrpReleaseResponseBody struct {
	// Tag name of release
	TagName *string `form:"tag_name,omitempty" json:"tag_name,omitempty" xml:"tag_name,omitempty"`
	// Size of release
	Size *int `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Assets of release
	Assets *FrpAssetResponseBody `form:"assets,omitempty" json:"assets,omitempty" xml:"assets,omitempty"`
	// Created at
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// FrpAssetResponseBody is used to define fields on response body types.
type FrpAssetResponseBody struct {
	// Name of asset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Download URL of asset
	DownloadURL *string `form:"download_url,omitempty" json:"download_url,omitempty" xml:"download_url,omitempty"`
	// Size of asset
	Size *int `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Downloads of asset
	Downloads *int `form:"downloads,omitempty" json:"downloads,omitempty" xml:"downloads,omitempty"`
}

// NewListFrpReleaseFrpReleaseOK builds a "frpc" service "ListFrpRelease"
// endpoint result from a HTTP "OK" response.
func NewListFrpReleaseFrpReleaseOK(body *ListFrpReleaseResponseBody) *frpc.FrpRelease {
	v := &frpc.FrpRelease{
		TagName:   body.TagName,
		Size:      body.Size,
		CreatedAt: body.CreatedAt,
	}
	if body.Assets != nil {
		v.Assets = unmarshalFrpAssetResponseBodyToFrpcFrpAsset(body.Assets)
	}

	return v
}

// ValidateListFrpReleaseResponseBody runs the validations defined on
// ListFrpReleaseResponseBody
func ValidateListFrpReleaseResponseBody(body *ListFrpReleaseResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	return
}
