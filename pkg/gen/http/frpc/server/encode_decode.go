// Code generated by goa v3.19.1, DO NOT EDIT.
//
// frpc HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/woxQAQ/frp-webconsole/api -o pkg

package server

import (
	"context"
	"net/http"

	frpc "github.com/woxQAQ/frp-webconsole/pkg/gen/frpc"
	goahttp "goa.design/goa/v3/http"
)

// EncodeListFrpReleaseResponse returns an encoder for responses returned by
// the frpc ListFrpRelease endpoint.
func EncodeListFrpReleaseResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*frpc.FrpRelease)
		enc := encoder(ctx, w)
		body := NewListFrpReleaseResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListFrpReleaseRequest returns a decoder for requests sent to the frpc
// ListFrpRelease endpoint.
func DecodeListFrpReleaseRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			os_  *string
			arch *string
		)
		qp := r.URL.Query()
		os_Raw := qp.Get("os")
		if os_Raw != "" {
			os_ = &os_Raw
		}
		archRaw := qp.Get("arch")
		if archRaw != "" {
			arch = &archRaw
		}
		payload := NewListFrpReleasePayload(os_, arch)

		return payload, nil
	}
}

// marshalFrpcFrpReleaseToFrpReleaseResponse builds a value of type
// *FrpReleaseResponse from a value of type *frpc.FrpRelease.
func marshalFrpcFrpReleaseToFrpReleaseResponse(v *frpc.FrpRelease) *FrpReleaseResponse {
	res := &FrpReleaseResponse{
		TagName:   v.TagName,
		CreatedAt: v.CreatedAt,
	}
	if v.Assets != nil {
		res.Assets = make([]*FrpAssetResponse, len(v.Assets))
		for i, val := range v.Assets {
			res.Assets[i] = marshalFrpcFrpAssetToFrpAssetResponse(val)
		}
	}

	return res
}

// marshalFrpcFrpAssetToFrpAssetResponse builds a value of type
// *FrpAssetResponse from a value of type *frpc.FrpAsset.
func marshalFrpcFrpAssetToFrpAssetResponse(v *frpc.FrpAsset) *FrpAssetResponse {
	if v == nil {
		return nil
	}
	res := &FrpAssetResponse{
		Name:        v.Name,
		DownloadURL: v.DownloadURL,
		Size:        v.Size,
		Downloads:   v.Downloads,
	}

	return res
}
